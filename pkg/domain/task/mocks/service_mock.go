// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	task "todoApi-go/pkg/domain/task"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AddTaskRepository is an autogenerated mock type for the AddTaskRepository type
type AddTaskRepository struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: _a0
func (_m *AddTaskRepository) AddTask(_a0 task.Task) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(task.Task) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields:
func (_m *AddTaskRepository) GetAllTasks() ([]task.Task, error) {
	ret := _m.Called()

	var r0 []task.Task
	if rf, ok := ret.Get(0).(func() []task.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: _a0
func (_m *AddTaskRepository) GetTask(_a0 uuid.UUID) (task.Task, error) {
	ret := _m.Called(_a0)

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(uuid.UUID) task.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(task.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewAddTaskRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddTaskRepository creates a new instance of AddTaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddTaskRepository(t NewAddTaskRepositoryT) *AddTaskRepository {
	mock := &AddTaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
